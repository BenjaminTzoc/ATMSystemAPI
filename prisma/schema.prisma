datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_EXTERNAL")
}

generator client {
  provider = "prisma-client-js"
}

model RolUsuario {
  id                Int       @id @default(autoincrement())
  descripcion       String    @unique
  usuarios          Usuario[]
}

model Usuario {
  usuarioId                 Int           @id @default(autoincrement())
  nombreUsuario             String        @unique
  contrasena                String
  rolId                     Int
  rol                       RolUsuario?   @relation(fields: [rolId], references: [id])
  correoElectronico         String        @unique
  fechaUltimoInicioSesion   DateTime?
  estadoUsuario             String        @default("A")
  fechaCreacion             DateTime      @default(now())
  cliente                   Cliente?
  transferencias            Transferencia[]
  auditorias                Auditoria[]
}

model Cliente {
  id                    Int         @id @default(autoincrement())
  nombre                String
  direccion             String
  telefono              String
  email                 String      @unique
  identificacion        String      @unique
  fecha_nacimiento      DateTime
  estado_civil          String
  genero                String
  nacionalidad          String
  fecha_creacion        DateTime    @default(now())
  accesosBancaVirtual   AccesoBancaVirtual[]
  cuentas               Cuenta[]
  usuario               Usuario?    @relation(fields: [usuarioId], references: [usuarioId])
  usuarioId             Int         @unique
}

model TipoCuenta {
  id            Int       @id @default(autoincrement())
  descripcion   String
  cuentas       Cuenta[]
}

model Cuenta {
  cuenta_id                      Int           @id @default(autoincrement())
  clienteId               Int           @unique
  cliente                 Cliente       @relation(fields: [clienteId], references: [id])
  numeroCuenta            String        @unique
  saldo                   Float
  tipoCuentaId            Int
  tipoCuenta              TipoCuenta    @relation(fields: [tipoCuentaId], references: [id])
  estadoCuenta            String
  limiteCredito           Float
  fechaApertura           DateTime
  fechaCierre             DateTime?
  tarjetas                Tarjeta[]
  pagosServicios          PagoServicio[]
  transferencias_origen   Transferencia[] @relation("TransferenciaCuentaOrigen")
  transferencias_destino  Transferencia[] @relation("TransferenciaCuentaDestino")
}

model Tarjeta {
  id                          Int       @id @default(autoincrement())
  cuentaId                    Int       @unique
  cuenta                      Cuenta    @relation(fields: [cuentaId], references: [cuenta_id])
  numeroTarjetaEncriptada     String    @unique
  tipoTarjeta                 String
  fechaVencimiento            DateTime
  estadoTarjeta               String
  pinTarjeta                  String
}

model TipoServicio {
  id      Int         @id @default(autoincrement())
  descripcion         String
  pagosServicios      PagoServicio[]
}

model PagoServicio {
  id                Int             @id @default(autoincrement())
  cuentaId          Int             @unique
  cuenta            Cuenta          @relation(fields: [cuentaId], references: [cuenta_id])
  tipoServicioId    Int
  tipoServicio      TipoServicio    @relation(fields: [tipoServicioId], references: [id])
  monto             Float
  referencia        String?
  estatus           String          @default("PENDIENTE")
  fechaPago         DateTime
}

model Transferencia {
  id                      Int       @id @default(autoincrement())
  cuenta_origen_id          Int       
  cuentaOrigen            Cuenta    @relation("TransferenciaCuentaOrigen", fields: [cuenta_origen_id], references: [cuenta_id])
  cuenta_destino_id         Int       
  cuentaDestino           Cuenta    @relation("TransferenciaCuentaDestino", fields: [cuenta_destino_id], references: [cuenta_id])
  monto                   Float
  estadoTransferencia     String    @default("PENDIENTE")
  fechaTransferencia      DateTime?
  fechaAutorizacion       DateTime?
  usuarioAutorizacionId   Int       
  usuarioAutorizacion     Usuario  @relation(fields: [usuarioAutorizacionId], references: [usuarioId])
  descripcion             String?
}

model AccesoBancaVirtual {
  id          Int       @id @default(autoincrement())
  clienteId   Int       @unique
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  fechaAcceso DateTime
  tipoAcceso  String
  exitoso     Boolean
}

model Auditoria {
  id                Int       @id @default(autoincrement())
  usuarioId         Int       @unique
  usuario           Usuario   @relation(fields: [usuarioId], references: [usuarioId])
  accion            String
  tablaAfectada     String
  registroAfectado  String?
  fechaAccion      DateTime
  ipOrigen         String
  detalles         String?
  descripcion       String
}