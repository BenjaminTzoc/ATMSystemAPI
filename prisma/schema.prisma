datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserRole {
  role_id           Int       @id @default(autoincrement())
  description       String    @unique
  users             User[]
}

model User {
  user_id         Int               @id @default(autoincrement())
  user_name       String            @unique
  password        String
  role_id         Int
  role            UserRole?         @relation(fields: [role_id], references: [role_id])
  email           String            @unique
  last_login      DateTime?
  user_status     String            @default("A")
  created_date    DateTime          @default(now())
  customer        Customer?
  transfers       Transfer[]
  audits          Audit[]
}

model Customer {
  customer_id             Int                     @id @default(autoincrement())
  name                    String
  address                 String
  telephone               String
  email                   String                  @unique
  identification          String                  @unique
  birthdate               DateTime
  civil_status            String
  gender                  String
  nationality             String
  created_date            DateTime                @default(now())
  virtual_bank_access     VirtualBankAccess[]
  accounts                Account[]
  user                    User?                   @relation(fields: [user_id], references: [user_id])
  user_id                 Int?                    @unique
  services                ServiceBalance[]
}

model AccountType {
  account_type_id       Int       @id @default(autoincrement())
  description           String
  accounts              Account[]
}

model Account {
  account_id                  Int                 @id @default(autoincrement())
  customer_id                 Int                 @unique
  customer                    Customer            @relation(fields: [customer_id], references: [customer_id])
  account_number              String              @unique
  balance                     Float
  account_type_id             Int
  account_type                AccountType         @relation(fields: [account_type_id], references: [account_type_id])
  account_status              String
  credit_limit                Float
  opening_date                DateTime
  closing_date                DateTime?
  cards                       Card[]
  payments_services           PaymentService[]
  transfers_origin            Transfer[]     @relation("AccountOriginTransfer")
  transfers_destination       Transfer[]     @relation("AccountDestinationTransfer")
}

model Card {
  card_id                 Int           @id @default(autoincrement())
  account_id              Int           @unique
  account                 Account       @relation(fields: [account_id], references: [account_id])
  card_number             String        @unique
  card_type               String
  expiration_date         DateTime
  card_status             String
  card_pin                String
}

model ServiceBalance {
  service_balance_id                Int           @id @default(autoincrement())
  customer_id                       Int
  service_type_id                   Int           
  customer                          Customer      @relation(fields: [customer_id], references: [customer_id])
  service_type                      ServiceType   @relation(fields: [service_type_id], references: [service_type_id])
  balance                           Float         @default(0)
  updated_date                      DateTime      @default(now())
  services_payments                 PaymentService[]
}

model ServiceType {
  service_type_id       Int               @id @default(autoincrement())
  description           String
  paymentsServices      PaymentService[]
  services              ServiceBalance[]
}

model PaymentService {
  payment_service_id        Int               @id @default(autoincrement())
  account_id                Int               
  account                   Account           @relation(fields: [account_id], references: [account_id])
  service_type_id           Int
  service_type              ServiceType       @relation(fields: [service_type_id], references: [service_type_id])
  amount                    Float
  reference                 String?
  status                    String            @default("P")
  payment_date              DateTime
  service_balance_id        Int
  service_balance           ServiceBalance    @relation(fields: [service_balance_id], references: [service_balance_id])
}

model Transfer {
  transfer_id                 Int           @id @default(autoincrement())
  account_origin_id           Int       
  account_origin              Account       @relation("AccountOriginTransfer", fields: [account_origin_id], references: [account_id])
  account_destination_id      Int       
  account_destination         Account       @relation("AccountDestinationTransfer", fields: [account_destination_id], references: [account_id])
  amount                      Float
  transfer_status             String        @default("P")
  transfer_date               DateTime?
  authorization_date          DateTime?
  authorization_user_id       Int       
  authorization_user          User          @relation(fields: [authorization_user_id], references: [user_id])
  description                 String?
}

model VirtualBankAccess {
  virtual_bank_id     Int           @id @default(autoincrement())
  customer_id         Int           @unique
  customer            Customer      @relation(fields: [customer_id], references: [customer_id])
  access_date         DateTime
  access_type         String
  success             Boolean
}

model Audit {
  audit_id                Int             @id @default(autoincrement())
  user_id                 Int             @unique
  user                    User            @relation(fields: [user_id], references: [user_id])
  action                  String
  affected_table          String
  affected_record         String?
  action_date             DateTime
  ip_origin               String
  details                 String?
  description             String
}